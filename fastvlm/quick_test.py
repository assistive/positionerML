#!/usr/bin/env python3
"""
Quick test to verify mobile converter dependencies work
"""

def test_imports():
    """Test all required imports."""
    print("üß™ Testing Mobile Converter Dependencies")
    print("=" * 50)
    
    success_count = 0
    total_tests = 0
    
    # Test PyTorch
    total_tests += 1
    try:
        import torch
        print(f"‚úÖ PyTorch {torch.__version__}")
        success_count += 1
    except ImportError as e:
        print(f"‚ùå PyTorch: {e}")
    
    # Test NumPy
    total_tests += 1
    try:
        import numpy as np
        print(f"‚úÖ NumPy {np.__version__}")
        success_count += 1
    except ImportError as e:
        print(f"‚ùå NumPy: {e}")
    
    # Test ONNX
    total_tests += 1
    try:
        import onnx
        print(f"‚úÖ ONNX {onnx.__version__}")
        success_count += 1
    except ImportError as e:
        print(f"‚ùå ONNX: {e}")
    
    # Test CoreMLTools
    total_tests += 1
    try:
        import coremltools as ct
        print(f"‚úÖ CoreMLTools {ct.__version__}")
        success_count += 1
    except ImportError as e:
        print(f"‚ùå CoreMLTools: {e}")
    
    # Test TensorFlow
    total_tests += 1
    tf_found = False
    tf_version = "unknown"
    
    try:
        import tensorflow as tf
        tf_found = True
        tf_version = tf.__version__
    except ImportError:
        try:
            import tensorflow_macos as tf
            tf_found = True 
            tf_version = tf.__version__
        except ImportError:
            try:
                import tensorflow_cpu as tf
                tf_found = True
                tf_version = tf.__version__
            except ImportError:
                pass
    
    if tf_found:
        print(f"‚úÖ TensorFlow {tf_version}")
        success_count += 1
        
        # Test TFLite
        try:
            converter = tf.lite.TFLiteConverter
            print("  ‚úÖ TFLite converter available")
        except Exception:
            print("  ‚ö†Ô∏è  TFLite converter issues")
    else:
        print("‚ùå TensorFlow: Not found")
    
    print("=" * 50)
    print(f"üìä Results: {success_count}/{total_tests} dependencies available")
    
    if success_count >= 4:  # At least PyTorch, NumPy, ONNX, and one mobile framework
        print("üéâ Ready for mobile conversion!")
        return True
    else:
        print("‚ùå Missing critical dependencies")
        return False

def test_simple_conversion():
    """Test a minimal conversion workflow."""
    print("\nüîÑ Testing Simple Conversion Workflow")
    print("=" * 50)
    
    try:
        import torch
        import torch.nn as nn
        
        # Create simple model
        class TinyModel(nn.Module):
            def __init__(self):
                super().__init__()
                self.linear = nn.Linear(3, 1)
            
            def forward(self, x):
                return self.linear(x)
        
        model = TinyModel()
        model.eval()
        
        # Test tracing
        dummy_input = torch.randn(1, 3)
        traced_model = torch.jit.trace(model, dummy_input)
        print("‚úÖ PyTorch model tracing: Works")
        
        # Test CoreML conversion (if available)
        try:
            import coremltools as ct
            
            coreml_model = ct.convert(
                traced_model,
                inputs=[ct.TensorType(shape=(1, 3))],
                convert_to="neuralnetwork"
            )
            print("‚úÖ CoreML conversion: Works")
            
        except ImportError:
            print("‚ö†Ô∏è  CoreML conversion: CoreMLTools not available")
        except Exception as e:
            print(f"‚ö†Ô∏è  CoreML conversion: {e}")
        
        # Test TensorFlow model creation (if available)
        try:
            import tensorflow as tf
            
            # Create equivalent TF model
            tf_model = tf.keras.Sequential([
                tf.keras.layers.Dense(1, input_shape=(3,))
            ])
            
            # Test TFLite conversion
            converter = tf.lite.TFLiteConverter.from_keras_model(tf_model)
            tflite_model = converter.convert()
            print("‚úÖ TensorFlow Lite conversion: Works")
            
        except ImportError:
            print("‚ö†Ô∏è  TensorFlow Lite conversion: TensorFlow not available")
        except Exception as e:
            print(f"‚ö†Ô∏è  TensorFlow Lite conversion: {e}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Conversion test failed: {e}")
        return False

def main():
    """Run all tests."""
    imports_ok = test_imports()
    
    if imports_ok:
        conversion_ok = test_simple_conversion()
        
        print("\n" + "=" * 50)
        print("üéØ FINAL RESULT")
        print("=" * 50)
        
        if conversion_ok:
            print("üéâ Mobile converter should work!")
            print("‚úÖ Run: python fastvlm_universal_converter.py")
        else:
            print("‚ö†Ô∏è  Basic imports work but conversion may have issues")
            print("üí° Try the simple converter: python simple_mobile_converter.py")
    else:
        print("\nüí° Install missing dependencies:")
        print("   pip install -r requirements_mobile.txt")
    
    return 0 if imports_ok else 1

if __name__ == "__main__":
    exit